# ============= NGINX LOAD BALANCER CONFIGURATION =============
# Load balancer for distributed module deployment

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/m;

    # Upstream definitions for each module
    upstream admin-module {
        least_conn;
        server admin-module:3001 max_fails=3 fail_timeout=30s;
        # Add more admin module instances here for scaling:
        # server admin-module-2:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream users-module {
        least_conn;
        server users-module:3002 max_fails=3 fail_timeout=30s;
        # Add more users module instances here for scaling:
        # server users-module-2:3002 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Health check configuration
    upstream health-check {
        server admin-module:3001 max_fails=1 fail_timeout=5s;
        server users-module:3002 max_fails=1 fail_timeout=5s;
    }

    # Main server configuration
    server {
        listen 80;
        listen [::]:80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy strict-origin-when-cross-origin;

        # CORS headers for API requests
        location ~* ^/api/ {
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Add CORS headers to actual requests
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        }

        # ============= ADMIN MODULE ROUTES =============
        location /api/admin {
            limit_req zone=api burst=50 nodelay;
            
            # Proxy settings
            proxy_pass http://admin-module;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            
            # Error handling
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
        }

        # ============= USERS MODULE ROUTES =============
        location /api/users {
            # Stricter rate limiting for authentication endpoints
            if ($uri ~* "/api/users/(login|register|logout)") {
                set $rate_limit auth;
            }
            if ($rate_limit = auth) {
                limit_req zone=auth burst=5 nodelay;
            }
            if ($rate_limit != auth) {
                limit_req zone=api burst=50 nodelay;
            }
            
            # Proxy settings
            proxy_pass http://users-module;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            
            # Error handling
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
        }

        # ============= HEALTH CHECK ENDPOINTS =============
        location /health {
            access_log off;
            
            # Custom health check that tests all modules
            proxy_pass http://health-check/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            
            # Return 503 if any upstream is down
            proxy_intercept_errors on;
            error_page 502 503 504 = @health_error;
        }

        location @health_error {
            return 503 '{"status":"unhealthy","message":"One or more services are down"}';
            add_header Content-Type application/json;
        }

        # Individual module health checks
        location /health/admin {
            access_log off;
            proxy_pass http://admin-module/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        location /health/users {
            access_log off;
            proxy_pass http://users-module/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # ============= METRICS AND MONITORING =============
        location /metrics {
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            # Aggregate metrics from all modules
            # This would need a custom solution or prometheus federation
            return 200 "# Metrics endpoint - implement module aggregation\n";
            add_header Content-Type text/plain;
        }

        # ============= STATUS PAGE =============
        location /status {
            access_log off;
            return 200 '{
                "status": "running",
                "timestamp": "$time_iso8601",
                "modules": {
                    "admin": "http://admin-module:3001",
                    "users": "http://users-module:3002"
                },
                "load_balancer": "nginx",
                "version": "1.0.0"
            }';
            add_header Content-Type application/json;
        }

        # ============= ERROR PAGES =============
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            return 404 '{"error":"Not Found","message":"The requested endpoint does not exist"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            return 500 '{"error":"Internal Server Error","message":"A server error occurred"}';
            add_header Content-Type application/json;
        }

        # ============= DEFAULT CATCH-ALL =============
        location / {
            # For distributed deployment, you might want to serve a status page
            # or redirect to a frontend application
            return 200 '{
                "message": "Distributed Module Deployment",
                "services": {
                    "admin": "/api/admin",
                    "users": "/api/users"
                },
                "health": "/health",
                "status": "/status"
            }';
            add_header Content-Type application/json;
        }
    }

    # ============= ADMIN INTERFACE (Optional) =============
    # Separate server block for admin interface if needed
    server {
        listen 8080;
        server_name admin.localhost;

        location / {
            proxy_pass http://admin-module;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}