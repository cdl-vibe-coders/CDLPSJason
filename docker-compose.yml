# ============= DOCKER COMPOSE CONFIGURATION =============
# Full application stack with database and optional distributed modules

version: '3.8'

services:
  # ============= DATABASE =============
  database:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # ============= MONOLITH DEPLOYMENT =============
  app-monolith:
    build:
      context: .
      dockerfile: Dockerfile.monolith
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@database:5432/${POSTGRES_DB:-app}
    ports:
      - "${APP_PORT:-5000}:5000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app_network
    profiles:
      - monolith

  # ============= DISTRIBUTED MODULES =============
  admin-module:
    build:
      context: .
      dockerfile: Dockerfile.module
      args:
        MODULE_NAME: admin
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@database:5432/${POSTGRES_DB:-app}
    ports:
      - "${ADMIN_PORT:-3001}:3001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app_network
    profiles:
      - distributed

  users-module:
    build:
      context: .
      dockerfile: Dockerfile.module
      args:
        MODULE_NAME: users
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@database:5432/${POSTGRES_DB:-app}
    ports:
      - "${USERS_PORT:-3002}:3002"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app_network
    profiles:
      - distributed

  # ============= LOAD BALANCER (for distributed mode) =============
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - admin-module
      - users-module
    networks:
      - app_network
    profiles:
      - distributed

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge