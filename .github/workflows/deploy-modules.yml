# ============= DISTRIBUTED MODULES DEPLOYMENT WORKFLOW =============
# Deploy individual modules independently

name: Deploy Modules

on:
  push:
    branches: [main, production]
    paths:
      - 'server/modules/**'
      - 'shared/**'
  pull_request:
    branches: [main]
    paths:
      - 'server/modules/**'
      - 'shared/**'
  workflow_dispatch:
    inputs:
      modules:
        description: 'Modules to deploy (comma-separated: admin,users or all)'
        required: true
        default: 'all'
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io

jobs:
  # ============= DETECT CHANGED MODULES =============
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.changes.outputs.modules }}
      admin_changed: ${{ steps.changes.outputs.admin }}
      users_changed: ${{ steps.changes.outputs.users }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed modules
        id: changes
        run: |
          if [ "${{ github.event.inputs.modules }}" != "" ]; then
            # Manual trigger - use specified modules
            modules="${{ github.event.inputs.modules }}"
            echo "modules=$modules" >> $GITHUB_OUTPUT
            
            if [[ "$modules" == *"admin"* ]] || [[ "$modules" == "all" ]]; then
              echo "admin_changed=true" >> $GITHUB_OUTPUT
            else
              echo "admin_changed=false" >> $GITHUB_OUTPUT
            fi
            
            if [[ "$modules" == *"users"* ]] || [[ "$modules" == "all" ]]; then
              echo "users_changed=true" >> $GITHUB_OUTPUT
            else
              echo "users_changed=false" >> $GITHUB_OUTPUT
            fi
          else
            # Automatic trigger - detect changes
            changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
            
            admin_changed=false
            users_changed=false
            
            if echo "$changed_files" | grep -q "server/modules/admin\|shared/"; then
              admin_changed=true
            fi
            
            if echo "$changed_files" | grep -q "server/modules/users\|shared/"; then
              users_changed=true
            fi
            
            echo "admin_changed=$admin_changed" >> $GITHUB_OUTPUT
            echo "users_changed=$users_changed" >> $GITHUB_OUTPUT
            
            # Build modules list
            modules=""
            if [ "$admin_changed" = "true" ]; then
              modules="admin"
            fi
            if [ "$users_changed" = "true" ]; then
              if [ "$modules" = "" ]; then
                modules="users"
              else
                modules="$modules,users"
              fi
            fi
            
            echo "modules=$modules" >> $GITHUB_OUTPUT
          fi
          
          echo "Modules to deploy: $modules"

  # ============= BUILD AND TEST MODULES =============
  build-and-test:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.modules != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run check

      - name: Make build script executable
        run: chmod +x scripts/build/build-module.sh

      - name: Test module builds
        run: |
          modules="${{ needs.detect-changes.outputs.modules }}"
          echo "Testing builds for modules: $modules"
          
          if [[ "$modules" == *"admin"* ]] || [[ "$modules" == "all" ]]; then
            echo "Testing admin module build..."
            ./scripts/build/build-module.sh admin standalone
          fi
          
          if [[ "$modules" == *"users"* ]] || [[ "$modules" == "all" ]]; then
            echo "Testing users module build..."
            ./scripts/build/build-module.sh users standalone
          fi

  # ============= BUILD ADMIN MODULE IMAGE =============
  build-admin-image:
    needs: [detect-changes, build-and-test]
    if: needs.detect-changes.outputs.admin_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-admin-module
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.module
          build-args: MODULE_NAME=admin
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=admin-module
          cache-to: type=gha,mode=max,scope=admin-module

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ github.repository }}-admin-module:${{ github.sha }}" >> $GITHUB_OUTPUT

  # ============= BUILD USERS MODULE IMAGE =============
  build-users-image:
    needs: [detect-changes, build-and-test]
    if: needs.detect-changes.outputs.users_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-users-module
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.module
          build-args: MODULE_NAME=users
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=users-module
          cache-to: type=gha,mode=max,scope=users-module

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ github.repository }}-users-module:${{ github.sha }}" >> $GITHUB_OUTPUT

  # ============= DEPLOY MODULES =============
  deploy-modules:
    needs: [detect-changes, build-admin-image, build-users-image]
    if: |
      always() && 
      needs.detect-changes.outputs.modules != '' &&
      (needs.build-admin-image.result == 'success' || needs.build-admin-image.result == 'skipped') &&
      (needs.build-users-image.result == 'success' || needs.build-users-image.result == 'skipped')
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Admin Module
        if: needs.detect-changes.outputs.admin_changed == 'true'
        run: |
          echo "Deploying Admin Module: ${{ needs.build-admin-image.outputs.image }}"
          
          # Create admin module docker-compose configuration
          IMAGE_TAG="${{ needs.build-admin-image.outputs.image }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          
          cat > docker-compose.admin-module.yml << EOF
          version: '3.8'
          services:
            admin-module:
              image: ${IMAGE_TAG}
              environment:
                - NODE_ENV=${ENVIRONMENT}
                - PORT=3001
                - DATABASE_URL=\${DATABASE_URL}
                - MODULE_NAME=admin
              ports:
                - "3001:3001"
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "node", "-e", "fetch('http://localhost:3001/health').then(() => process.exit(0)).catch(() => process.exit(1))"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 15s
              deploy:
                resources:
                  limits:
                    memory: 512M
                    cpus: '0.3'
                  reservations:
                    memory: 256M
                    cpus: '0.1'
          EOF
          
          echo "Docker compose configuration created for admin module deployment"

      - name: Deploy Users Module
        if: needs.detect-changes.outputs.users_changed == 'true'
        run: |
          echo "Deploying Users Module: ${{ needs.build-users-image.outputs.image }}"
          
          # Create users module docker-compose configuration
          IMAGE_TAG="${{ needs.build-users-image.outputs.image }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          
          cat > docker-compose.users-module.yml << EOF
          version: '3.8'
          services:
            users-module:
              image: ${IMAGE_TAG}
              environment:
                - NODE_ENV=${ENVIRONMENT}
                - PORT=3002
                - DATABASE_URL=\${DATABASE_URL}
                - MODULE_NAME=users
              ports:
                - "3002:3002"
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "node", "-e", "fetch('http://localhost:3002/health').then(() => process.exit(0)).catch(() => process.exit(1))"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 15s
              deploy:
                resources:
                  limits:
                    memory: 512M
                    cpus: '0.3'
                  reservations:
                    memory: 256M
                    cpus: '0.1'
          EOF
          
          echo "Docker compose configuration created for users module deployment"

      - name: Run health checks
        run: |
          echo "Running health checks for deployed modules..."
          
          # Wait for modules to start
          echo "Waiting for modules to initialize..."
          sleep 45
          
          # Health check for Admin Module
          if [ "${{ needs.detect-changes.outputs.admin_changed }}" = "true" ]; then
            echo "Health check for Admin Module..."
            
            max_attempts=8
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Admin module health check attempt $attempt/$max_attempts..."
              
              if curl -f -s "http://admin-module-host:3001/health" > /dev/null; then
                echo "✅ Admin module health check passed!"
                admin_health=$(curl -s "http://admin-module-host:3001/health")
                echo "Admin health response: $admin_health"
                break
              else
                echo "❌ Admin module health check failed, retrying in 10 seconds..."
                if [ $attempt -eq $max_attempts ]; then
                  echo "❌ Admin module health check failed after $max_attempts attempts"
                  exit 1
                fi
                sleep 10
                ((attempt++))
              fi
            done
          fi
          
          # Health check for Users Module
          if [ "${{ needs.detect-changes.outputs.users_changed }}" = "true" ]; then
            echo "Health check for Users Module..."
            
            max_attempts=8
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Users module health check attempt $attempt/$max_attempts..."
              
              if curl -f -s "http://users-module-host:3002/health" > /dev/null; then
                echo "✅ Users module health check passed!"
                users_health=$(curl -s "http://users-module-host:3002/health")
                echo "Users health response: $users_health"
                break
              else
                echo "❌ Users module health check failed, retrying in 10 seconds..."
                if [ $attempt -eq $max_attempts ]; then
                  echo "❌ Users module health check failed after $max_attempts attempts"
                  exit 1
                fi
                sleep 10
                ((attempt++))
              fi
            done
          fi
          
          echo "✅ All deployed modules passed health checks!"

      - name: Record deployment
        run: |
          echo "Recording module deployment details..."
          modules="${{ needs.detect-changes.outputs.modules }}"
          environment="${{ github.event.inputs.environment || 'staging' }}"
          timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          echo "Modules: $modules"
          echo "Environment: $environment"
          echo "Timestamp: $timestamp"
          
          if [ "${{ needs.detect-changes.outputs.admin_changed }}" = "true" ]; then
            echo "Admin Image: ${{ needs.build-admin-image.outputs.image }}"
          fi
          
          if [ "${{ needs.detect-changes.outputs.users_changed }}" = "true" ]; then
            echo "Users Image: ${{ needs.build-users-image.outputs.image }}"
          fi