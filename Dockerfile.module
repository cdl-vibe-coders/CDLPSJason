# ============= STANDALONE MODULE DEPLOYMENT DOCKERFILE =============
# Build individual modules for distributed deployment
# Usage: docker build -f Dockerfile.module --build-arg MODULE_NAME=admin .

FROM node:20-alpine AS builder

WORKDIR /app

# Build argument for module name
ARG MODULE_NAME
ENV MODULE_NAME=${MODULE_NAME}

# Copy package files
COPY package*.json ./

# Install dependencies for building
RUN npm ci

# Copy source code
COPY server ./server
COPY shared ./shared
COPY scripts ./scripts

# Make build script executable
RUN chmod +x scripts/build/build-module.sh

# Build the specific module
RUN ./scripts/build/build-module.sh ${MODULE_NAME} standalone

# ============= PRODUCTION STAGE =============

FROM node:20-alpine AS production

WORKDIR /app

# Build argument for module name
ARG MODULE_NAME
ENV MODULE_NAME=${MODULE_NAME}

# Copy module-specific build
COPY --from=builder /app/dist/${MODULE_NAME} ./

# Install production dependencies for the module
# Use npm install since the build script creates a minimal package.json without lock file
RUN npm install --omit=dev && npm cache clean --force

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodeuser -u 1001

# Set ownership
RUN chown -R nodeuser:nodejs /app
USER nodeuser

# Expose port (configurable via environment)
EXPOSE ${PORT:-3000}

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "fetch('http://localhost:${PORT:-3000}/health').then(() => process.exit(0)).catch(() => process.exit(1))"

# Start the module
CMD ["npm", "start"]